
pipeline {
    agent any
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        IMAGE_NAME = 'chidanand876/pet-clinic123'
        TAG = 'latest'
        EKS_CLUSTER = 'my-eks-cluster'
        DEV_NAMESPACE = 'dev'
        QA_NAMESPACE = 'qa'
        PROD_NAMESPACE = 'production'
    }
    
    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/chida876/Petclinic.git'
            }
        }
        
        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }
        
        stage('Sonarqube Analysis') {
            steps {
                sh 'mvn clean package'
                sh """mvn sonar:sonar \
                      -Dsonar.projectKey=petclnic \
                      -Dsonar.host.url=http://54.252.183.46:9000 \
                      -Dsonar.login=7ee0e6013b828d29c1db08f88bb9374da394e732"""
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("$IMAGE_NAME:$TAG")
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_HUB_CREDENTIALS) {
                        docker.image("$IMAGE_NAME:$TAG").push()
                    }
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                sh "trivy $IMAGE_NAME:$TAG"
            }
        }
        
        stage('Deploy to EKS') {
            parallel {
                stage('Deploy to Dev') {
                    steps {
                        sh "kubectl config use-context $EKS_CLUSTER"
                        sh "kubectl apply -f dev-deployment.yaml"
                    }
                }
                stage('Deploy to QA') {
                    steps {
                        sh "kubectl config use-context $EKS_CLUSTER"
                        sh "kubectl apply -f qa-deployment.yaml"
                    }
                }
                stage('Deploy to Production') {
                    when {
                        branch 'main'
                    }
                    steps {
                        input 'Proceed with deploying to production?'
                        sh "kubectl config use-context $EKS_CLUSTER"
                        sh "kubectl apply -f prod-deployment.yaml"
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                def coverage = sh(script: 'mvn jacoco:report | grep "Total instruction coverage"', returnStdout: true).trim()
                if (coverage.contains('80%')) {
                    emailext body: "Code coverage reached 80%: ${coverage}",
                        subject: "Code Coverage Alert",
                        to: "chidanandc.8842c@example.com"
                }
            }
        }
    }
}

